// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "FrameInfoTemplate.h"
#include "CharmingCraft/Core/Builds/Module/BuildModuleManager.h"
#include "GameFramework/Actor.h"
#include "FrameActor.generated.h"
class UBoxComponent;

/*!
 * Frame Type Describe what the frame should classify as
 */
UENUM(BlueprintType)
enum class EFrameType: uint8
{
	DESTROY UMETA(DisplayName = "Destroy"),
	PLACE UMETA(DisplayName = "Place"),
	UTILITY UMETA(DisplayName = "Utility")
};

USTRUCT(BlueprintType)
struct FColliedResult
{
	GENERATED_BODY()

	FColliedResult(): bIsValidCollied(false), bIsInRange(false), ColliedActor(nullptr)
	{
	}

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category="Validation")
	bool bIsValidCollied;
	// Data that tell whether in range, especially useful for range based tools like hoe
	// you should not allow player plowing from extreme far distance
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category="Validation")
	bool bIsInRange;
	UPROPERTY(BlueprintReadWrite, VisibleAnywhere)
	TObjectPtr<AActor> ColliedActor;
};

/*
 *	AFrameActor Used for Build System Manipulation visual check,
 *	Base on the LoadedFrameAppearance, each build mode could
 *	generate different appearance of FrameActor with different
 *	function
 */
UCLASS()
class CHARMINGCRAFT_API AFrameActor : public AActor
{
	GENERATED_BODY()

public:
	// Sets default values for this actor's properties
	AFrameActor();
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	TObjectPtr<USceneComponent> SceneComponent;

	// 3D Outline, Current used in Destroy Frame style
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category="FrameOutlineBox3D")
	TObjectPtr<UStaticMeshComponent> FrameOutlineBox3D;
	// 2D Outline, Planning used in hoe tool 星露谷的平面放置显示
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category="FrameOutline2D")
	TObjectPtr<UStaticMeshComponent> FrameOutline2D;
	// LoadedFrameAppearance describe different FrameType correspond to different
	// style and function
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category="FrameAppearance")
	TSubclassOf<UFrameInfoTemplate> FrameAppearanceClass;
	UPROPERTY(BlueprintReadOnly)
	TObjectPtr<UFrameInfoTemplate> FrameAppearance;

	// Set of Result generated by AFrameActor, result can be vary due to internal function
	// of UFrameInfoTemplate, for example, DestroyFrameInfoTemplate would fill "Block" that
	// it collied
	UPROPERTY(BlueprintReadWrite, EditAnywhere, Category="ColliedResult")
	FColliedResult ColliedResult;
	// Actual Collision box that detect collision
	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	TObjectPtr<UBoxComponent> CollisionBox;


	UPROPERTY(BlueprintReadWrite, EditAnywhere)
	EFrameType CurrentFrameActorType = EFrameType::DESTROY;

	UPROPERTY(BlueprintReadOnly, VisibleAnywhere, Category="BuildModuleManager")
	TObjectPtr<UBuildModuleManager> BuildModuleManager;

	// TODO: Consider to use filer design to tell Frame Actor what should overlap what should not

public:
	UFUNCTION()
	void OnOverlapBegin(UPrimitiveComponent* OverlappedComp, AActor* OtherActor, UPrimitiveComponent* OtherComp,
	                    int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult);
	UFUNCTION()
	void OnOverlapEnd(UPrimitiveComponent* OverlappedComp, AActor* OtherActor, UPrimitiveComponent* OtherComp,
	                  int32 OtherBodyIndex);

protected:
	// Called when the game starts or when spawned
	virtual void BeginPlay() override;

public:
	// Called every frame
	virtual void Tick(float DeltaTime) override;

	// EFrameType::DESTROY Pattern
	UFUNCTION(Blueprintable, BlueprintNativeEvent)
	void SetFrameDestroyState();
};
